/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/info': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Info Page */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Info page rendered in markdown */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['InfoPage'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/api/routes': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Available Routes for Tasks */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description List of routes for available tasks */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['APIRoutes'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tasks/generate_db/task_schema': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Input Schema for Generating Database */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Input schema for generating database */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['TaskSchema'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tasks/generate_db': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Run Task to Generate Database */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Inputs and parameters for generating database */
      requestBody: {
        content: {
          'application/json': components['schemas']['RequestBody'];
        };
      };
      responses: {
        /** @description Task completed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ResponseBody'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tasks/face_match/task_schema': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get Input Schema for Face Matching */
    get: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      requestBody?: never;
      responses: {
        /** @description Input schema for face matching */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['TaskSchema'];
          };
        };
      };
    };
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  '/tasks/face_match': {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Run Task to Perform Face Matching */
    post: {
      parameters: {
        query?: never;
        header?: never;
        path?: never;
        cookie?: never;
      };
      /** @description Inputs and parameters for face matching */
      requestBody: {
        content: {
          'application/json': components['schemas']['RequestBody'];
        };
      };
      responses: {
        /** @description Task completed successfully */
        200: {
          headers: {
            [name: string]: unknown;
          };
          content: {
            'application/json': components['schemas']['ResponseBody'];
          };
        };
      };
    };
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @example {
     *       "info": "# Welcome to the Face Match App\n\nThis app will help you to match faces in your images..."
     *     } */
    InfoPage: {
      /** @description Markdown content to render on the info page */
      info: string;
      author: string;
      version: string;
      /** Format: date-time */
      lastUpdated: string;
    };
    APIRoutes: (
      | components['schemas']['SchemaAPIRoute']
      | components['schemas']['NoSchemaAPIRoute']
    )[];
    SchemaAPIRoute: {
      /** @example /tasks/{name_of_task}/task_schema */
      task_schema: string;
      /** @example /tasks/{name_of_task} */
      run_task: string;
      /** @example /tasks/{name_of_task}/payload_schema */
      payload_schema: string;
      /** @example /tasks/{name_of_task}/sample_payload */
      sample_payload?: string;
      /** @example {A short title for the task} */
      short_title: string;
      /** @example 1 */
      order: number;
    };
    NoSchemaAPIRoute: {
      /** @example /tasks/{name_of_task} */
      run_task: string;
      /** @example /tasks/{name_of_task}/payload_schema */
      payload_schema?: string;
      /** @example /tasks/{name_of_task}/sample_payload */
      sample_payload?: string;
    };
    Input:
      | components['schemas']['FileInput']
      | components['schemas']['DirectoryInput']
      | components['schemas']['TextInput']
      | components['schemas']['BatchFileInput']
      | components['schemas']['BatchTextInput'];
    FileInput: {
      path: string;
    };
    DirectoryInput: {
      path: string;
    };
    TextInput: {
      text: string;
    };
    BatchFileInput: {
      files: components['schemas']['FileInput'][];
    };
    BatchTextInput: {
      texts: components['schemas']['TextInput'][];
    };
    TaskSchema: {
      inputs: components['schemas']['InputSchema'][];
      parameters: components['schemas']['ParameterSchema'][];
    };
    InputSchema: {
      key: string;
      label: string;
      /** @default  */
      subtitle: string | null;
      inputType: components['schemas']['InputType'];
    };
    /** @enum {string} */
    InputType:
      | 'file'
      | 'directory'
      | 'text'
      | 'textarea'
      | 'batchfile'
      | 'batchtext';
    ParameterSchema: {
      key: string;
      label: string;
      /** @default  */
      subtitle: string | null;
      value:
        | components['schemas']['RangedFloatParameterDescriptor']
        | components['schemas']['FloatParameterDescriptor']
        | components['schemas']['EnumParameterDescriptor']
        | components['schemas']['TextParameterDescriptor']
        | components['schemas']['RangedIntParameterDescriptor']
        | components['schemas']['IntParameterDescriptor'];
    };
    /** @enum {string} */
    ParameterType:
      | 'ranged_float'
      | 'float'
      | 'enum'
      | 'text'
      | 'ranged_int'
      | 'int';
    RangedFloatParameterDescriptor: {
      /** @default ranged_float */
      parameterType: components['schemas']['ParameterType'];
      range: components['schemas']['FloatRangeDescriptor'];
      default: number;
    };
    FloatParameterDescriptor: {
      /** @default float */
      parameterType: components['schemas']['ParameterType'];
      default: number;
    };
    EnumParameterDescriptor: {
      /** @default enum */
      parameterType: components['schemas']['ParameterType'];
      enumVals: {
        label?: string;
        key?: string;
      }[];
      messageWhenEmpty?: string;
      default: string;
    };
    TextParameterDescriptor: {
      /** @default text */
      parameterType: components['schemas']['ParameterType'];
      default: string | null;
    };
    RangedIntParameterDescriptor: {
      /** @default ranged_int */
      parameterType: components['schemas']['ParameterType'];
      range: components['schemas']['IntRangeDescriptor'];
      default: number;
    };
    IntParameterDescriptor: {
      /** @default int */
      parameterType: components['schemas']['ParameterType'];
      default: number | null;
    };
    IntRangeDescriptor: {
      min: number;
      max: number;
    };
    FloatRangeDescriptor: {
      min: number;
      max: number;
    };
    RequestBody: {
      inputs: {
        [key: string]: components['schemas']['Input'];
      };
      parameters: Record<string, never>;
    };
    ResponseBody:
      | components['schemas']['FileResponse']
      | components['schemas']['DirectoryResponse']
      | components['schemas']['MarkdownResponse']
      | components['schemas']['TextResponse']
      | components['schemas']['BatchFileResponse']
      | components['schemas']['BatchTextResponse'];
    /** @enum {string} */
    ResponseType:
      | 'file'
      | 'directory'
      | 'markdown'
      | 'text'
      | 'batchfile'
      | 'batchtext';
    FileResponse: {
      /** @default file */
      output_type: components['schemas']['ResponseType'];
      /** @enum {string} */
      file_type:
        | 'img'
        | 'csv'
        | 'json'
        | 'text'
        | 'audio'
        | 'video'
        | 'markdown';
      path: string;
      title?: string;
      subtitle?: string;
    };
    DirectoryResponse: {
      /** @default directory */
      output_type: components['schemas']['ResponseType'];
      path: string;
      title: string;
      subtitle: string | null;
    };
    MarkdownResponse: {
      /** @default markdown */
      output_type: components['schemas']['ResponseType'];
      value: string;
      title?: string;
      subtitle?: string;
    };
    TextResponse: {
      /** @default text */
      output_type: components['schemas']['ResponseType'];
      value: string;
      title?: string;
      subtitle?: string;
    };
    BatchFileResponse: {
      /** @default batchfile */
      output_type: components['schemas']['ResponseType'];
      files: components['schemas']['FileResponse'][];
    };
    BatchTextResponse: {
      /** @default batchtext */
      output_type: components['schemas']['ResponseType'];
      texts: components['schemas']['TextResponse'][];
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type SchemaInfoPage = components['schemas']['InfoPage'];
export type SchemaApiRoutes = components['schemas']['APIRoutes'];
export type SchemaSchemaApiRoute = components['schemas']['SchemaAPIRoute'];
export type SchemaNoSchemaApiRoute = components['schemas']['NoSchemaAPIRoute'];
export type SchemaInput = components['schemas']['Input'];
export type SchemaFileInput = components['schemas']['FileInput'];
export type SchemaDirectoryInput = components['schemas']['DirectoryInput'];
export type SchemaTextInput = components['schemas']['TextInput'];
export type SchemaBatchFileInput = components['schemas']['BatchFileInput'];
export type SchemaBatchTextInput = components['schemas']['BatchTextInput'];
export type SchemaTaskSchema = components['schemas']['TaskSchema'];
export type SchemaInputSchema = components['schemas']['InputSchema'];
export type SchemaInputType = components['schemas']['InputType'];
export type SchemaParameterSchema = components['schemas']['ParameterSchema'];
export type SchemaParameterType = components['schemas']['ParameterType'];
export type SchemaRangedFloatParameterDescriptor =
  components['schemas']['RangedFloatParameterDescriptor'];
export type SchemaFloatParameterDescriptor =
  components['schemas']['FloatParameterDescriptor'];
export type SchemaEnumParameterDescriptor =
  components['schemas']['EnumParameterDescriptor'];
export type SchemaTextParameterDescriptor =
  components['schemas']['TextParameterDescriptor'];
export type SchemaRangedIntParameterDescriptor =
  components['schemas']['RangedIntParameterDescriptor'];
export type SchemaIntParameterDescriptor =
  components['schemas']['IntParameterDescriptor'];
export type SchemaIntRangeDescriptor =
  components['schemas']['IntRangeDescriptor'];
export type SchemaFloatRangeDescriptor =
  components['schemas']['FloatRangeDescriptor'];
export type SchemaRequestBody = components['schemas']['RequestBody'];
export type SchemaResponseBody = components['schemas']['ResponseBody'];
export type SchemaResponseType = components['schemas']['ResponseType'];
export type SchemaFileResponse = components['schemas']['FileResponse'];
export type SchemaDirectoryResponse =
  components['schemas']['DirectoryResponse'];
export type SchemaMarkdownResponse = components['schemas']['MarkdownResponse'];
export type SchemaTextResponse = components['schemas']['TextResponse'];
export type SchemaBatchFileResponse =
  components['schemas']['BatchFileResponse'];
export type SchemaBatchTextResponse =
  components['schemas']['BatchTextResponse'];
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
